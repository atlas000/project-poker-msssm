%% game function. Representing one game of poker. Calls the functions headsup and headsup2
function [winner,counter]=game(startCapitalP1,riskFactorP1,startCapitalP2,riskFactorP2,betValue,start)

%transfer of variables
playerP1=[riskFactorP1 startCapitalP1 0 0]; %player matrix containing all important parameters and variable for player1
playerP2=[riskFactorP2 startCapitalP2 0 0]; %player matrix containing all important parameters and variable for player2
counter = 0; %every hand played increases the counter by one, helps alternating the head's-up fuction

%loop calling the headsup functions alternating between headsup and
%headsup2. Runs until one player is out of "money".
%headsup: player1 has to pay the mandatory blind
%headsup2: player2 has to pay the mandatory blind

%% Variables for learning Algorythm:
nroundsplayed =0;            %#  counter for rounds played without blind
tr1=0;                       %#  Times opponed played preflop without blinds
Rf=0;   
%%  Calculate the best riskfactors
evaluation =(1/100)*[43;37;40;38;36;36;39;38;41;39;38;37;42;41;40;40;42;41;42;40;43;45;43;38;44;40;44;44;43;41;42;42;46;46;45;47;44;47;47;48;45;44;46;47;47;47;45;47;49;47;46;44;48;46;44;35;48;31;31;35;27;21;31;25;35;24;26;14;29;18;2;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;12;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;12;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1];
%%
while playerP1(2) > 0 && playerP2(2) > 0
    counter = counter + 1;
    decide_who_starts = mod(counter, 2);
    
    %input: needed variables capital, risk factor, bet size, counter
    %output: capital of player1 and player2, counter
    if decide_who_starts == 1
        [playerP1(2),playerP2(2),tr1]=headsup(playerP1(2),playerP1(1),playerP2(2),playerP2(1),betValue,tr1);
        nroundsplayed = nroundsplayed +1;
        nround1played=tr1;
%% Learning algorithm
   if start <= nroundsplayed;           % Condition when the evaluation of opponents RF starts
       Rf = 1 - (tr1/nroundsplayed); % Since the Cardvalue is generated by a rand function, every outcome has the same probability and therefore can x
            
%                 if nroundsplayed <=10;
%                         Rf = Rf +0.15;    %accounting for the error of small samples/conservative guess
%                 elseif nroundsplayed <=20;
%                         Rf = Rf +0.1;     %accounting for the error of small samples/conservative guess
%                 elseif nroundsplayed <=30;
%                         Rf = Rf +0.08;    %accounting for the error of small samples/conservative guess
%                 elseif nroundsplayed <=40;
%                         Rf = Rf +0.05;    %accounting for the error of small samples/conservative guess
%                 elseif nroundsplayed <=50;
%                         Rf = Rf +0.02 ;    %accounting for the error of small samples/conservative guess
%                 end
            playerP1(1)= evaluation(round(Rf*100)+1,1);     
    end
    else
        [playerP1(2),playerP2(2)]=headsup2(playerP1(2),playerP1(1),playerP2(2),playerP2(1),betValue);
        Rf = 1 - (tr1/nroundsplayed);
    end;
    schaetzverlauf(counter)=Rf;
    geldverlauf(counter)=playerP1(2);
end;
subplot(2,1,1)
plot(1:counter,geldverlauf);
xlabel('Amount of chips player 1')
hold on
subplot(2,1,2)
plot(1:counter,schaetzverlauf);
xlabel('Estimation of opponents Riskfactor')

hold on

%when player2 is out of money the win counter is increased by 1
if playerP1(2) == 0
    winner = 0;
elseif playerP2(2) == 0
    winner = 1;
else
    error('Error with headsup')
end